# case-DB

    https://downloads.mysql.com/docs/world.sql.gz
    https://downloads.mysql.com/doc/sakila-db.zip
    
use pymysql
# case-1  
# show city and NO.
db = pymysql.connect(host='192.168.15.142',user='root',passwd='xxx',db='world',port=3306,charset='utf8')
conn = db
cur = conn.cursor()
table = 'City'
column = 'Name'
term = 's%'
statement = """select * from %s where %s like '%s' """ % (table,column,term)
cmd = cur.execute(statement)
results = cur.fetchall()
record_list  =[]
for record in results:
    record_list.append(record[1])
for i in range(0, len(record_list)):
    print("%s. %s" %(i+1, record_list[i]))

# case-2
import pymysql
mydb = pymysql.connect('192.168.15.142','root','wallace','world')
cursor = mydb.cursor()
statement = """select count(*) from city"""
run=cursor.execute(statement)
fetch = cursor.fetchall()
print(fetch)



use pandas
# case-1  
import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy.types import CHAR,INT

connect_info = 'mysql+pymysql://root:wallace@192.168.15.142:3306/base?charset=utf8'
engine = create_engine(connect_info)
sql = "select * from 客户表 limit 10"
pd.read_sql(sql=sql, con=engine)

'''
代码中的con是使用SQLAlchem构建数据库连接引擎，即sqlalchemy.create_engine( )。
这个函数基于一个URL来产生一个引擎对象，URL通常包含了数据库的相关信息，典型的形式是：

dialect+driver://username:password@host:port/database

dialect表示数据库的名字，比如sqlite，mysql，postgresql，oracle，mssql等，
driver是用于连接数据库的DBAPI的名字，这里用的是pymysql（Python 3.x，在Python 2.x中用的是mysqldb），
如果这一项不指定，将使用默认的DBAPI。
'''

case-4
import pandas as pd
from sqlalchemy import create_engine
from sqlalchemy.types import CHAR,INT

connect_info = 'mysql+pymysql://root:wallace@192.168.15.142:3306/world?charset=utf8'
engine = create_engine(connect_info)
sql = 'show tables'
df = pd.read_sql(sql=sql,con=engine)
df.to_sql(name = 'test1',  
           con = engine,
           if_exists = 'append',
           index = False,
           dtype = {'id': INT(),
                    'name': CHAR(length=2),
                    'score': CHAR(length=2)
                    }
           )
 
'''
name：输出的表名
con：连接数据库的引擎
if_exists：三种模式{“fail”,“replace”,"append"}，默认是"fail"。
    fail：若表存在，引发一个ValueError；
    replace：若表存在，覆盖原来表内数据；
    append：若表存在，将数据写到原表数据的后面。
index：是否将DataFrame的index单独写到一列中，默认为“True”
index_label：当index为True时，指定列作为DataFrame的index输出
dtype：指定列的数据类型，字典形式存储{column_name: sql_dtype}，
常见数据类型是sqlalchemy.types.INT()和sqlalchemy.types.CHAR(length=x)。
注意：INT和CHAR都需要大写，INT()不用指定长度。
'''
 
 


