#!/usr/bin/expect --


##  

################## 参数配置 ##################

# 最大并发进程数
set pnumber 200
# 子进程产生间隔 ms,避免子进程不能及时回收
set sleep_time 10
# expect 执行命令超时时间 单位:s
set timeout 150000
# 默认SSH端口
set default_port 57522
# 文件传输时使用的最大带宽 KBytes
set bwlimit 10240


## expect关键字,支持正则表达式
# 输入密码
set key_password "password:"
# 密码错误
set key_password_faild "\(publickey,password\)."
# 再次确认
set key_init "\(yes/no\)\?"
# 再次确认
set key_confirm "'yes'\ or\ 'no':"
# 命令输入提示符
set key_ps ".*\](#|\\\$)"
# 修改密码
set key_newpassword "ew password:"
# rsync错误代码
set key_rsync_error "\\\(code \[0-9\]*\\\) at main.c"

################## 参数配置结束 ##################
set VERSIONS 3.0
proc help {} {
	upvar argv0 name
	upvar VERSIONS v
	puts "aoto.exp $v"
	puts "Usage: $name < 'host file' | -f 'host file' | -H 'host'> <'cmd file' | -C 'cmd file' | -c 'cmd'> \[user | -u user\] \[...\]\n"
	puts "\t-c <\"cmd\">\t提交单条指令"
	puts "\t-C <cmd file>\t指定指令集文件"
	puts "\t\t\t命令文件一行一条指令，不支持多行续行输入"
	puts "\t-f <host file>\t指定主机文件"
	puts "\t\t\t文件中的【新密码】字段为可选,若有该字段时在命令文件中有passwd命令时将会修改登陆到远程系统当前用户的密码"
	puts "\t\t\t文件中若以'#'开始的行和只包含空格、制表符的行以及空行会被忽略掉"
	puts "\t\t\t文件格式支持1、2、3、4个字段，各字段使用空格或制表符分隔"
	puts "\t\t\t一个字段时,字段依次必须为 主机地址"
	puts "\t\t\t两个字段时,字段依次必须为 主机地址 主机密码"
	puts "\t\t\t三个字段时,字段依次必须为 主机地址 主机端口 主机密码"
	puts "\t\t\t四个字段时,字段依次必须为 主机地址 主机端口 主机密码 主机新密码"
	puts "\t\t\t支持在同一份文件中这4种数据格式并存"
	puts "\t-H <host>\t指定单台主机"
	puts "\t-p <password>\t指定统一密码,或配合 -H <host>参数时使用"
	puts "\t-P <port>\t指定统一端口"
	puts "\t-u <user>\t指定统一用户,或配合 -H <host>参数时使用"
	puts "\t-b <bwlimit>\t传输文件时使用的带宽，默认为10M"
	puts "\t-B <before|after>传输文件在执行命令之前或之后，默认为'before'"
	puts "\t-D <pull|push>\t指定文件传输时的方向，默认为'push'"
	puts "\t-s <sourcefile>\t传输的源文件"
	puts "\t-d <destdir>\t传输时指定的目标文件或路径"
	puts "\t-m\t\t目标文件或路径附加上远程主机名或IP(重命名目标文件)，该参数配合 -D 参数为'pull'时生效"
	puts "\t-v\t\t显示详细输出"
	puts "\t-h\t\t显示本帮助信息"
}

if {[lsearch -regexp $argv {^-h$}] >= 0} {
	help
	exit
}

# 参数处理
for {set i 0} {$i < $argc} {incr i} {
	set argv_temp [lindex $argv $i]
	if [regexp {^-v$} $argv_temp] { # 详细日志
		set display_log 1
	} elseif [regexp {^-h$} $argv_temp] { # 帮助信息
		help
		exit
	} elseif [regexp {^-p$} $argv_temp] { # 密码
		set cmd_pass [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-c$} $argv_temp] { # 命令
		set cmd_command [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-u$} $argv_temp] { # 用户
		set user [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-P$} $argv_temp] { # 端口
		set cmd_port [lindex $argv [expr $i + 1]]
		if [regexp {\D} $cmd_port] {
			send_error "$argv0 : Options \"$argv_temp $port\" error\n"
			exit 1
		}
		incr i
	} elseif [regexp {^-H$} $argv_temp] { # IP
		set cmd_host [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-f$} $argv_temp] { # 主机列表文件
		set host_file [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-C$} $argv_temp] { # 命令列表文件
		set command_file [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-b$} $argv_temp] { # 带宽
		set bwlimit [lindex $argv [expr $i + 1]]
		if [regexp {\D} $bwlimit] {
			send_error "$argv0 : Options \"$argv_temp $port\" error\n"
			exit 1
		}
		incr i
	} elseif [regexp {^-B$} $argv_temp] { # 传输文件的次序
		set before_file [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-D$} $argv_temp] { # 传输文件的方向
		set direction_file [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-s$} $argv_temp] { # 传输的源文件
		set local_file [lindex $argv [expr $i + 1]]
		incr i
		if [regexp {/$} $local_file] {
			spawn -noecho echo -n "需要同步的源文件为目录类型,是否继续?(Y/n)"
			interact
			expect_user {
				-re "^(n|N)\n" {
					exit
				}
				-re "^\n" {
					continue
				}
				-re "^(y|Y)\n" {
					continue
				}
				timeout {
					continue
				}
			}
		}
	} elseif [regexp {^-d$} $argv_temp] { # 传输的目标文件
		set remote_file [lindex $argv [expr $i + 1]]
		incr i
	} elseif [regexp {^-m$} $argv_temp] { # 目标文件附加主机
		set remote_file_add 1
	} else { # 默认参数处理
		if { ! [info exists host_file] } {
			set host_file [lindex $argv $i]
		} elseif { ! [info exists command_file] } {
			set command_file [lindex $argv $i]
		} elseif { ! [info exists user] } {
			set user [lindex $argv $i]
		}
	}
}

if {![info exists host_file] && ![info exists cmd_host]} {
	help
	exit 1
} elseif {![info exists command_file] && ![info exists cmd_command]} {
	help
	exit 1
}

# 机器列表数据格式:
# 1、IP  端口  密码  [新密码]
# 2、IP  端口  密码
# 3、IP  密码
# 4、IP
if {![info exists cmd_host]} {
	set hostfile [open $host_file]
	while {[gets $hostfile hostfile_var] >= 0} {
		if { [regexp {^#} $hostfile_var] == 0 } {
			lappend hostfile_list $hostfile_var
		}
	}
	close $hostfile
} else {
	lappend hostfile_list $cmd_host
}
set hostfile_list_length [llength $hostfile_list]

# 命令列表数据格式:  一条命令一行
if {![info exists cmd_command]} {
	set cmdfile [open $command_file]
	while {[gets $cmdfile cmd] >= 0} {
		lappend cmdfile_list $cmd
	}
	close $cmdfile
} else {
	lappend cmdfile_list $cmd_command
}
set cmdfile_list_length [llength $cmdfile_list]



# 初始化参数
set send_slow {10 .001}
set now_date [timestamp -format "%Y%m%d%H%M"]
set p_start_time [clock seconds]
set now_time $p_start_time
set ppid [pid]
set host_number 0
set log_info ""
set log_dir "expect_log"
set log_dir_1 "$log_dir/$now_date"
set log_file "auto_expect_$now_date.log"
set logfile "$log_dir/$log_file"
set temp_dir ".temp/.$ppid"

if {![file exists $log_dir]} {
	file mkdir $log_dir
}
if {![file exists $log_dir_1]} {
	file mkdir $log_dir_1
}
if {![file exists "$temp_dir"]} {
	file mkdir "$temp_dir"
}

set pid_file [glob -nocomplain -directory $temp_dir -tails -type f .*]
match_max 20480
exp_version -exit 5.44.1.15

if [info exists display_log] {
	log_user 1
} else {
	log_user 0
}

if { ![info exists direction_file] } {
	set direction_file "push"
}

# 子进程退出回调函数
proc sigchld {} {
	global pids ppid temp_dir

	while { ! [catch {wait -i -1} output] } {
		set p [lindex $output 0]
		set status [lindex $output 3]
		if [file exists "$temp_dir/.$p"] {
			file delete "$temp_dir/.$p"
		}
		#elseif {[info exists pids([pid])] && $ppid != $p} {
		#	# puts "子进程 [pid] 派生的进程 [lindex $output 0] 已退出, 状态码: $status"
		#}
	}
	return
}

# 写错误日志函数
proc error_log { mid host type } {
	if {[catch {set log_file [open ".$mid" "a+"]} errmsg]} { 
		after 10
		while {[catch {set log_file [open ".$mid" "a+"]} errmsg]} {
			after 10
		}
	}
	if {[catch {puts $log_file "$type $host"} results]} {
		after 10
		while {[catch {puts $log_file "$type $host"} results]} {
			after 10
		}
	}
	close $log_file
	return
}

# 传送文件函数
proc send_file {sourcefile destdir {direction "push"}} {
	global host port user pass bwlimit ppid log_info
	global key_password key_password_faild key_init key_confirm key_ps key_rsync_error

	if { $direction == "pull" } { # 拉回本地
		if {[info exists user]} {
			spawn /usr/bin/rsync -artvz --bwlimit=$bwlimit -e "ssh -l$user -p$port" $host:$sourcefile $destdir
		} else {
			spawn /usr/bin/rsync -artvz --bwlimit=$bwlimit -e "ssh -p$port" $host:$sourcefile $destdir
		}
	} elseif { $direction == "push" } { # 推送到远程
		if [info exists user] {
			spawn /usr/bin/rsync -artvz --bwlimit=$bwlimit -e "ssh -l$user -p$port" $sourcefile $host:$destdir
		} else {
			spawn /usr/bin/rsync -artvz --bwlimit=$bwlimit -e "ssh -p$port" $sourcefile $host:$destdir
		}
	} else {
		help
		return 1
	}

	while {1} {
		expect {
			"$key_password" {
				send -s "$pass\r"
				set log_info "$log_info$expect_out(buffer)"
			}
			"$key_init" {
				send -s "yes\r"
				set log_info "$log_info$expect_out(buffer)"
			}
			"$key_confirm" {
				send -s "yes\r"
				set log_info "$log_info$expect_out(buffer)"
			}
			"$key_password_faild" {
				puts "$host password error"
				error_log $ppid $host "passwrod"
				set log_info "$log_info$expect_out(buffer)"
				break
			}
			-re "$key_rsync_error" {
				puts "$host rsync error"
				error_log $ppid $host "rsync"
				set log_info "$log_info$expect_out(buffer)"
				break
			}
			timeout {
				puts "$host timeout"
				error_log $ppid $host "timeout"
				break
			}
			default {
				set succeed 1
				break
			}
		}
	}
	catch {close}
	catch {wait}

	if [info exists succeed] {
		return 0
	} else {
		return 1
	}
}

# 子进程写详细日志函数
proc write_log {logfile message} {
	if [catch {open $logfile "a+"} results] {
		after 10
		while [catch {open $logfile "a+"} results] {
			after 10
		}
	}
	set log_file $results
	if [catch {puts $log_file $message} results] {
		after 10
		while [catch {puts $log_file $message} results] {
			after 10
		}
	}
	close $log_file
	return
}

# 汇总统计信息函数
proc summary_log { var mid } {

	global log_dir_1

	set log_num [llength [glob -nocomplain -directory $log_dir_1 -tails -type f *.log]]
	set host_en 0
	set log_info "\n======================== 统计 ========================\n"
	set log_info "$log_info\t此次共处理机器: $var 台, 日志记录: $log_num 台\n"

	if [ file exists ".$mid"] {
		set log_file [open ".$mid"]
		while {[gets $log_file line] >= 0} {
			set str [string trim $line]
			set _list_ [split $str " "]
			set tag [lindex $_list_ 0]
			set host [lindex $_list_ 1]
			if [info exists error_number($tag)] {
				incr error_number($tag)
				lappend error_host($tag) $host
			} else {
				set error_number($tag) 1
				set error_host($tag) $host
			}
		}
		file delete ".$mid"

		set _tag_list_ [split [string trim [array names error_number]] " "]
		for {set i 0} {$i < [llength $_tag_list_]} {incr i} {
			set log_info "$log_info------------------------------------------------------\n"
			if { [lindex $_tag_list_ $i] == "connect" } {
				set log_info "$log_info\t连接失败: $error_number([lindex $_tag_list_ $i]) 台\n"
				set log_info "$log_info------------------------------------------------------\n"
				set log_info "$log_info\t连接失败IP: $error_host([lindex $_tag_list_ $i])\n"
			} elseif { [lindex $_tag_list_ $i] == "passwrod" } {
				set log_info "$log_info\t密码错误: $error_number([lindex $_tag_list_ $i]) 台\n"
				set log_info "$log_info------------------------------------------------------\n"
				set log_info "$log_info\t密码错误IP: $error_host([lindex $_tag_list_ $i])\n"
			} elseif { [lindex $_tag_list_ $i] == "timeout" } {
				set log_info "$log_info\t等待超时: $error_number([lindex $_tag_list_ $i]) 台\n"
				set log_info "$log_info------------------------------------------------------\n"
				set log_info "$log_info\t等待超时IP: $error_host([lindex $_tag_list_ $i])\n"
			} elseif { [lindex $_tag_list_ $i] == "rsync" } {
				set log_info "$log_info\t传输错误: $error_number([lindex $_tag_list_ $i]) 台\n"
				set log_info "$log_info------------------------------------------------------\n"
				set log_info "$log_info\t传输错误IP: $error_host([lindex $_tag_list_ $i])\n"
			} elseif { [lindex $_tag_list_ $i] == "system" } {
				set log_info "$log_info\t系统错误: $error_number([lindex $_tag_list_ $i]) 台\n"
				set log_info "$log_info------------------------------------------------------\n"
				set log_info "$log_info\t系统错误IP: $error_host([lindex $_tag_list_ $i])\n"
			} else {
				set log_info "$log_info\t其他错误: $error_number([lindex $_tag_list_ $i]) 台\n"
				set log_info "$log_info------------------------------------------------------\n"
				set log_info "$log_info\t其他错误IP: $error_host([lindex $_tag_list_ $i])\n"
			}
			incr host_en $error_number([lindex $_tag_list_ $i])
		}
	}
	set log_info "$log_info------------------------------------------------------\n"
	set log_info "$log_info\t处理成功: [expr $var - $host_en] 台, 日志记录: $log_num 台\n"
	set log_info "$log_info------------------------------------------------------\n"
	return $log_info
}

# 重新汇总日志
proc remake_log {log_path} {
	global logfile
	set log_files_list [glob -nocomplain -directory $log_path -type f *.log]
	set log_files_length [llength $log_files_list]
	if [catch {open $logfile "w"} results] {
		after 10
		while [catch {open $logfile "w"} results] {
			after 10
		}
	}
	set logfile_id $results
	for {set log_file_i 0} {$log_file_i < $log_files_length} {incr log_file_i} {
		set log_file [lindex $log_files_list $log_file_i]
		set log_file_id [open $log_file]
		set log_message [read -nonewline $log_file_id]
		close $log_file_id
		set log_host_list [split $log_file "/"]
		set log_host [split [lindex $log_host_list [llength $log_host_list]-1] "_"]
		set log_host_ip [lindex $log_host 0]
		set log_message "\n===================== $log_host_ip  =====================\n$log_message"
		if [catch {puts $logfile_id $log_message} results] {
			after 10
			while [catch {puts $logfile_id $log_message} results] {
				after 10
			}
		}
	}
	close $logfile_id
}

# 注册子进程退出信号处理函数
#trap { sigchld } SIGCHLD

for {set i_host 0} {$i_host < $hostfile_list_length} {incr i_host} {
	set _hosts_ [lindex $hostfile_list $i_host]
	regsub -all {\s+} $_hosts_ " " _hosts_
	set hosts [string trim $_hosts_]
	if { [regexp {^#} $hosts] == 1 } {
		continue
	}
	if { [string length $hosts] == 0 } {
		continue
	}

	incr host_number
	set hosts_list [split $hosts " "]
	set hosts_list_length [llength $hosts_list]

	if {$hosts_list_length == 1} {
		set host [lindex $hosts_list 0]
		if {[info exists cmd_port]} {
			set port $cmd_port
		} else {
			set port $default_port
		}
		if {[info exists cmd_pass]} {
			set pass $cmd_pass
			set newpass $pass
		} else {
			send_error "无可用密码不能运行\n"
			exit
		}
	} elseif {$hosts_list_length == 2} {
		set host [lindex $hosts_list 0]
		if {[info exists cmd_port]} {
			set port $cmd_port
		} else {
			set port $default_port
		}
		set pass [lindex $hosts_list 1]
		set newpass $pass
	} elseif {$hosts_list_length == 3} {
		set host [lindex $hosts_list 0]
		set port [lindex $hosts_list 1]
		set pass [lindex $hosts_list 2]
		set newpass $pass
	} elseif {$hosts_list_length >= 4} {
		set host [lindex $hosts_list 0]
		set port [lindex $hosts_list 1]
		set pass [lindex $hosts_list 2]
		set newpass [lindex $hosts_list 3]
	}

	if {![info exists run_pid]} {
		set run_pid 0
	}

	if { $run_pid <= $pnumber } {
		set child_pid [fork]
		if {$child_pid == 0 || $ppid != [pid]} {
			# 子进程
			#disconnect
			log_file -a "$log_dir_1/$host\_$now_date.log"
			trap { 
				puts "PID:[pid] exit ..."
				exit
			} SIGINT
			catch {unset spawn_id}
			catch {unset ssh_error_exit}

			set c_start_time [clock seconds]
			set cpid_file "$temp_dir/.[pid]"
			set pid_file [open "$cpid_file" "w"]
			puts $pid_file "[pid]"
			close $pid_file
			
			if {$child_pid == ""} {
				set child_pid 0
			}

			set log_info "$log_info\n===================== $host \($port\) =====================\n"

			if {[info exists direction_file] && [info exists remote_file_add]} {
				if {$direction_file == "pull"} {
					set remote_file "$remote_file-$host"
				}
			}

			if {[info exists local_file] && [info exists remote_file]} {
				if { ![info exists before_file] } {
					if {[send_file $local_file $remote_file $direction_file] >0 } {
						send_error "主机 $host 同步文件失败\n"
						set log_info "$log_info\n主机 $host 同步文件失败\n"
						#break
					} else {
						# send_user "主机 $host 同步文件成功\n"
						set log_info "$log_info\n主机 $host 同步文件成功\n"
					}
				} elseif { [info exists before_file] } {
					if { $before_file == "before"} {
						if {[send_file $local_file $remote_file $direction_file] >0 } {
							send_error "主机 $host 同步文件失败\n"
							set log_info "$log_info\n主机 $host 同步文件失败\n"
							#break
						} else {
							# send_user "主机 $host 同步文件成功"
							set log_info "$log_info\n主机 $host 同步文件成功\n"
						}
					}
				}
			}

			if [info exists user] {
				spawn ssh -p $port -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $host -l $user
			} else {
				spawn ssh -p $port -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no $host
			}

			while {1} {
				expect {
					"$key_password" {
						send "$pass\r"
						set log_info "$log_info$expect_out(buffer)"
					}
					"$key_init" {
						send "yes\r"
						set log_info "$log_info$expect_out(buffer)"
					}
					"$key_confirm" {
						send "yes\r"
						set log_info "$log_info$expect_out(buffer)"
					}
					"$key_password_faild" {
						puts "$host password error"
						error_log $ppid $host "passwrod"
						set log_info "$log_info$expect_out(buffer)"
						break
					}
					-re "$key_ps" {
						for {set j 0} {$j < $cmdfile_list_length} {incr j} {
							set cmd [lindex $cmdfile_list $j]
							send "$cmd\r"
							set log_info "$log_info$expect_out(buffer)"
							expect {
								-re "$key_ps" {
									continue
								}
								"$key_newpassword" {
									send "$newpass\r"
									set log_info "$log_info$expect_out(buffer)"
									expect "$key_newpassword" {
										send "$newpass\r"
										set log_info "$log_info$expect_out(buffer)"
										expect -re "$key_ps"
										continue
									}
								}
							}
						}
						send "\r"
						set log_info "$log_info$expect_out(buffer)"
						expect {
							-re "$key_ps" {
								send "\r"
								set log_info "$log_info$expect_out(buffer)"
								#sleep [expr {round(rand()*10)}]
							}
						}
						break
					}
					timeout {
						puts "$host timeout"
						set ssh_error_exit 1
						error_log $ppid $host "timeout"
						break
					}
					default {
						puts "$host Connection faild"
						set ssh_error_exit 1
						error_log $ppid $host "connect"
						break
					}
				}
			}
			if { ! [info exists ssh_error_exit] } {
				send "exit\r"
			}
			catch {close}
			catch {wait}

			if {[info exists local_file] && [info exists remote_file]} {
				if { [info exists before_file] } {
					if { $before_file == "after"} {
						if {[send_file $local_file $remote_file $direction_file] >0 } {
							send_error "主机 $host 同步文件失败\n"
							set log_info "$log_info\n主机 $host 同步文件失败\n"
							#break
						} else {
							# send_user "主机 $host 同步文件成功"
							set log_info "$log_info\n主机 $host 同步文件成功\n"
						}
					}
				}
			}

			# 子进程处理完毕，准备退出
			write_log $logfile $log_info
			if [file exists "$cpid_file"] {
				file delete "$cpid_file"
			}
			exit
		} elseif {$child_pid > 0 || $ppid == [pid]} {
			# 父进程
			if {[clock seconds] != $now_time} {
				set now_time [clock seconds]
				set pid_file [glob -nocomplain -directory $temp_dir -tails -type f .*]
			}
			set run_pid [llength $pid_file]
			set run_number 0
			while {$run_pid >= $pnumber} {
				sleep 1
				set pid_file [glob -nocomplain -directory $temp_dir -tails -type f .*]
				set run_pid [llength $pid_file]
				# 处理进度: 已处理的有效机器数/已处理的文档记录数/文档记录总数
				puts "PID: [pid], 处理进度: $host_number/$i_host/$hostfile_list_length, 队列使用: $run_pid/$pnumber, 队列满，等待处理中..."

			}
			while {$run_pid <= 0 && $run_number < 5} {
				after $sleep_time
				set pid_file [glob -nocomplain -directory $temp_dir -tails -type f .*]
				set run_pid [llength $pid_file]
				incr run_number
				# 处理进度: 已处理的有效机器数/已处理的文档记录数/文档记录总数
				#puts "PID: [pid], 处理进度: $host_number/$i_host/$hostfile_list_length, 队列使用: $run_pid/$pnumber, IP: $host."
			}

			# 处理进度: 已处理的有效机器数/已处理的文档记录数/文档记录总数
			puts "PID: [pid], 处理进度: $host_number/$i_host/$hostfile_list_length, 队列使用: $run_pid/$pnumber, IP: $host"
		} else {
			# 系统异常
			send_error "系统异常ID:001,批处理中断\n"
			error_log $ppid $host "system"
			puts "HOST:$host--PID:[pid]--PPID:$ppid--CHILD_PID:$child_pid"
			exit
			# break
		}
	} else {
		send_error "系统异常ID:002,HOST:$host"
		error_log $ppid $host "system"
	}
	after $sleep_time
	# 回收子进程
	sigchld
}

set time_out 0
# 重置超时时间
set timeout 30
# 处理进度: 已处理的有效机器数/已处理的文档记录数/文档记录总数
puts "PID: [pid], 处理进度: $host_number/$i_host/$hostfile_list_length, 队列使用: [llength [glob -nocomplain -directory $temp_dir -tails -type f .*]]/$pnumber"
puts "任务已批量提交完成, 等待进程执行完毕"
while {[llength [glob -nocomplain -directory $temp_dir -tails -type f .*]] > 0} {
	sleep 1
	sigchld
	incr time_out
	set pid_list [glob -nocomplain -directory $temp_dir -tails -type f .*]
	set pid_number [llength $pid_list]
	# 处理进度: 已处理的有效机器数/已处理的文档记录数/文档记录总数
	puts "PID: [pid], 处理进度: $host_number/$i_host/$hostfile_list_length, 队列使用: $pid_number/$pnumber"
	if {$time_out > 100} {
		spawn -noecho echo -n "有 $pid_number 进程未完成,是否继续等待?(Y/n)"
		interact
		expect_user {
			-re "^(n|N)\n" {
				break
			}
			-re "^\n" {
				puts "\n以下子进程 \[$pid_list\] 还在运行，若确认子进程已完成，可在下一次确认时输入'n'\n"
				sigchld
				continue
			}
			-re "^(y|Y)\n" {
				puts "\n以下子进程 \[$pid_list\] 还在运行，若确认子进程已完成，可在下一次确认时输入'n'\n"
				sigchld
				continue
			}
			-re "(.)" {
				puts "\n以下子进程 \[$pid_list\] 还在运行，若确认子进程已完成，可在下一次确认时输入'n'\n"
				sigchld
				continue
			}
			timeout {
				puts "\n以下子进程 \[$pid_list\] 还在运行，若确认子进程已完成，可在下一次确认时输入'n'\n"
				sigchld
				continue
			}
		}
	}
}
set total_log [summary_log $host_number $ppid]
puts "$total_log"
file delete $temp_dir
set p_end_time [clock seconds]
set p_run_tiem [expr $p_end_time - $p_start_time]
puts "整体耗时: $p_run_tiem 秒"
puts "重新整理日志中..."
remake_log $log_dir_1
write_log $logfile $total_log
puts "详细的输出日志已写入日志文件: $logfile"
exit

